{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["colors","quotes","text","author","DisplayQuote","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quote","listClass","currentIdx","currentcolor","Like","likeQuote","bind","assertThisInitialized","handleNewQuote","update","_this2","setState","findIndex","x","concat","toConsumableArray","rqm","rqmcolor","Math","floor","random","length","i","slice","_this3","react_default","a","createElement","Container","Helmet","style","className","Row","Col","xs","sm","md","lg","onClick","textDecoration","target","href","react_motions_min","duration","infinite","react_flip_move_es","staggerDurationBy","staggerDelayBy","map","index","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38cdd2f3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { Bounce, Shake } from 'react-motions';\r\nimport {Helmet}from 'react-helmet';\r\nimport './App.css';\r\nimport '../node_modules/font-awesome/css/font-awesome.min.css'\r\nimport FlipMove from 'react-flip-move';\r\n\r\n/******random quote machine*******/\r\nvar colors=['#87aeed','#f4aea6','#f44d3a','#f7ae80','#f9d3bb','#f78b47','#fcd685','#fcc653','#f2e680','#fff719','#c3f977','#aaed87','#87f981','#81f9c3','#36f7a0','#3deef7','#62c3f7','#d495f4'];\r\nconst quotes = [{\r\n  text: 'Well Bones, do the new medical facilities meet with your approval?',\r\n  author: '-Kirk'\r\n}, {\r\n  text: 'Live long and prosper',\r\n  author: '-Spock'\r\n}, {\r\n  text: 'Computers make excellent and efficient servants, but I have no wish to serve under them.',\r\n  author: '-Spock'\r\n}, {\r\n  text: 'In critical moments, men sometimes see exactly what they wish to see.',\r\n  author: '-Spock'\r\n}, {\r\n  text: 'When you eliminate the impossible, whatever remains, however improbable, must be the truth.',\r\n  author: '-Spock'\r\n}, {\r\ntext: 'The needs of the many outweigh the needs of the few.',\r\n  author: '-Spock'\r\n}, {\r\ntext: 'What am I, a doctor or a moon-shuttle conductor?',\r\n  author: '-McCoy'\r\n}, {\r\ntext: 'Resistance Is Futile',\r\n  author: '-Borg '\r\n}, {\r\ntext: 'In Space, all warriors are Cold Warriors.',\r\n  author: '-Klingon Proverb'\r\n}, {\r\n  text: 'How we deal with death is at least as important as how we deal with life',\r\n  author: '-Kirk'\r\n}];\r\n\r\n\r\nclass DisplayQuote extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      quote: quotes[0],\r\n      listClass: [],\r\n      currentIdx: 0,\r\n      currentcolor:'#f4aea6',\r\n      Like: \"No\"\r\n    };\r\n   this.likeQuote = this.likeQuote.bind(this);\r\n    this.handleNewQuote = this.handleNewQuote.bind(this);\r\n    this.update = this.update.bind(this);\r\n    \r\n }\r\n  likeQuote(){\r\n    this.setState({\r\n      Like: \"Yes\"\r\n    }) \r\n     if(this.state.listClass.findIndex(x=>x.text===this.state.quote.text)===-1)\r\n     {\r\n       this.setState({\r\n         listClass: [...this.state.listClass, this.state.quote]\r\n       })\r\n      \r\n    }  \r\n  }\r\n  handleNewQuote() {  \r\n    let rqm;\r\n    let rqmcolor\r\n    do {\r\n       rqm = Math.floor(Math.random() * quotes.length);\r\n      rqmcolor = Math.floor(Math.random() * colors.length);\r\n\r\n    } while (this.state.currentIdx === rqm&&this.state.currentcolor === rqmcolor )\r\n    this.setState({\r\n      quote: quotes[rqm],\r\n      currentIdx: rqm,\r\n      currentcolor:colors[rqmcolor],\r\n      Like: \"No\"\r\n    })  \r\n  } \r\n\r\n  update(i)\r\n  {      \r\n    this.setState({\r\n          listClass: [...this.state.listClass.slice(0, i), ...this.state.listClass.slice(i + 1)],\r\n          currentcolor:'#f4aea6'\r\n      });\r\n    \r\n  }\r\n  render() {\r\n    \r\n    \r\n    return (\r\n     <Container>\r\n       <Helmet>\r\n         <body style={'background-color:'+this.state.currentcolor}></body>\r\n        </Helmet>\r\n       <div className=\"contain\">\r\n       <blockquote><p className=\"text\">{this.state.quote.text}</p></blockquote>\r\n        \r\n        <p className=\"text text-right\">{this.state.quote.author}</p>\r\n        \r\n        <Row>\r\n          <Col xs={6} sm={5} md={4} lg={3}>\r\n            <button className=\"btn btn-block btn-primary\" onClick={this.likeQuote}><i className=\"fa fa-thumbs-up\"></i>Like</button>\r\n          </Col>\r\n          <Col xs={6} sm={5} md={5} lg={3}>\r\n          <a style={{ textDecoration: 'none' }} target=\"_blank\" href={'https://twitter.com/intent/tweet/?text='+this.state.quote.text+\r\n          ' - '+this.state.quote.author}>\r\n          <button className=\"btn btn-block btn-info\"><i className=\"fa fa-twitter\"></i>Tweet</button></a>\r\n          </Col>   \r\n          <Col xs={0} sm={0} md={0} lg={3}>\r\n          </Col>\r\n          <Bounce duration={4} infinite>\r\n          <Col xs={12} sm={12} md={12} lg={12}>\r\n          <div className=\"text-right\">\r\n            <button className=\"btn btn-success\" onClick={this.handleNewQuote}>New-Quote</button>\r\n            </div>\r\n          </Col>\r\n          </Bounce>\r\n        </Row>\r\n        </div>\r\n        <div className=\"board\">\r\n         <Helmet>\r\n         <div style={'background-color:'+this.state.currentcolor}></div>\r\n        </Helmet>\r\n        <Shake duration={4}>\r\n          <div><span className=\"btn btn-secondary\">Favourate Board</span></div></Shake>\r\n             \r\n           <FlipMove duration={350} staggerDurationBy={20} staggerDelayBy={20}>\r\n              {this.state.listClass.map((i,index) => (\r\n              <li className=\"text2 item\"><span>{i.text}<span className=\"pull-right\"><button className=\"btn btn-danger\" onClick={() => {\r\n                this.update(index)\r\n              } }>\r\n              <i className=\"fa fa-close\" /></button>           \r\n              </span><br/>\r\n              {i.author}</span>\r\n              </li>\r\n              ))}\r\n          </FlipMove>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n};\r\n\r\n//ReactDOM.render(<DisplayQuote />,document.getElementById('root'));\r\nexport default DisplayQuote;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n//import 'bootstrap/dist/css/boostrap.min.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}